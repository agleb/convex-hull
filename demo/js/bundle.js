(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var convexHull = require('../../src/convex-hull.js');

var osm = L.tileLayer('http://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png', {
    maxZoom: 22,
    attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>'
}),
    point = L.latLng([55.753210, 37.621766]),
    lmap = new L.Map('map', { layers: [osm], center: point, zoom: 12, maxZoom: 22 }),
    generateButton = document.getElementsByClassName('generate')[0],
    pointsNumberButton = document.getElementsByClassName('points-number')[0],
    markers,
    polygon;

function drawHull() {
    if (markers) {
        lmap.removeLayer(markers);
    }

    if (polygon) {
        lmap.removeLayer(polygon);
    }

    var bounds = lmap.getBounds(),
        n = bounds._northEast.lat,
        e = bounds._northEast.lng,
        s = bounds._southWest.lat,
        w = bounds._southWest.lng,
        height = n - s,
        width = e - w,
        qHeight = height / 4,
        qWidth = width / 4,
        pointsNumber = pointsNumberButton.value,
        points,
        coords,
        res,
        lls;

    points = turf.random('points', pointsNumber, {
        bbox: [w + qWidth, s + qHeight, e - qWidth, n - qHeight]
    });

    coords = points.features.map(function (feature) {
        return feature.geometry.coordinates;
    });

    res = convexHull(coords);

    lls = res.map(function (coord) {
        return L.latLng([coord[1], coord[0]]);
    });

    markers = L.geoJson(points, {
        pointToLayer: function (feature, latlng) {
            return L.circleMarker(latlng, { radius: 3, fillColor: "#ffff00" });
        }
    }).addTo(lmap);

    polygon = L.polygon(lls, { color: "#ffb90f" }).addTo(lmap);
}

generateButton.onclick = drawHull;

drawHull();

var cs = [[0, 1], [2, 0], [3, 1], [2, 2], [2, 1]];

console.log(convexHull(cs));

},{"../../src/convex-hull.js":2}],2:[function(require,module,exports){
function convexHull(data) {
    var upperArr = [],
        lowerArr = [];

    data.sort(function (a, b) {
        return a[0] - b[0];
    });

    // calculate the upper hull
    for (var i = 0; i < data.length; i++) {
        var point = data[i];

        upperArr.push(point);
        removePoints(upperArr);
    }

    // calculate the lower hull
    for (var j = data.length - 1; j >= 0; j--) {
        var point = data[j];

        lowerArr.push(point);
        removePoints(lowerArr);
    }

    lowerArr.splice(0, 1);
    lowerArr.splice(lowerArr.length - 1, 1);

    // concat hulls
    return upperArr.concat(lowerArr);
}

function removePoints(arr) {
    while (arr.length >= 3 && !isTurnRight(arr[arr.length - 3], arr[arr.length - 2], arr[arr.length - 1])) {
        arr.splice(arr.length - 2, 1);
    }
}

function isTurnRight(point1, point2, point3) {
    var x1 = point1[0],
        x2 = point2[0],
        x3 = point3[0],
        y1 = point1[1],
        y2 = point2[1],
        y3 = point3[1];

    return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) > 0;
}

module.exports = convexHull;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
